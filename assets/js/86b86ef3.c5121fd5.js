"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[337],{5680:(e,t,n)=>{n.d(t,{xA:()=>p,yg:()=>f});var r=n(6540);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var c=r.createContext({}),l=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},p=function(e){var t=l(e.components);return r.createElement(c.Provider,{value:t},e.children)},d="mdxType",g={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,c=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),d=l(n),u=a,f=d["".concat(c,".").concat(u)]||d[u]||g[u]||o;return n?r.createElement(f,s(s({ref:t},p),{},{components:n})):r.createElement(f,s({ref:t},p))}));function f(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,s=new Array(o);s[0]=u;var i={};for(var c in t)hasOwnProperty.call(t,c)&&(i[c]=t[c]);i.originalType=e,i[d]="string"==typeof e?e:a,s[1]=i;for(var l=2;l<o;l++)s[l]=n[l];return r.createElement.apply(null,s)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},6351:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>s,default:()=>g,frontMatter:()=>o,metadata:()=>i,toc:()=>l});var r=n(8168),a=(n(6540),n(5680));const o={title:"2. Core Concepts",sidebar_position:2},s="Core Concepts",i={unversionedId:"core_concepts",id:"core_concepts",title:"2. Core Concepts",description:"The Model-View-Intent (MVI) pattern in adidas MVI follows these principles:",source:"@site/docs/core_concepts.md",sourceDirName:".",slug:"/core_concepts",permalink:"/mvi/docs/core_concepts",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/core_concepts.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{title:"2. Core Concepts",sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"1. Introduction",permalink:"/mvi/docs/intro"},next:{title:"3. Getting started",permalink:"/mvi/docs/getting_started"}},c={},l=[{value:"Model",id:"model",level:2},{value:"View",id:"view",level:2},{value:"Intent",id:"intent",level:2},{value:"Side Effects",id:"side-effects",level:2},{value:"State",id:"state",level:2}],p={toc:l},d="wrapper";function g(e){let{components:t,...n}=e;return(0,a.yg)(d,(0,r.A)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,a.yg)("h1",{id:"core-concepts"},"Core Concepts"),(0,a.yg)("p",null,"The ",(0,a.yg)("strong",{parentName:"p"},"Model-View-Intent (MVI)")," pattern in adidas MVI follows these principles:"),(0,a.yg)("h2",{id:"model"},"Model"),(0,a.yg)("p",null,"The ",(0,a.yg)("strong",{parentName:"p"},"Model")," represents the state of the application. It\u2019s immutable and stores all the information required to render the user interface."),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-kotlin"},"sealed class LoginState {\n    data class LoggedOut(val isLoggingIn: Boolean) : LoginState()\n    data class LoggedIn(val username: String) : LoginState()\n}\n")),(0,a.yg)("h2",{id:"view"},"View"),(0,a.yg)("p",null,"The ",(0,a.yg)("strong",{parentName:"p"},"View")," observes the model and updates itself accordingly. It reacts to changes in the ",(0,a.yg)("strong",{parentName:"p"},"Model")," and displays the current state."),(0,a.yg)("h2",{id:"intent"},"Intent"),(0,a.yg)("p",null,"An ",(0,a.yg)("strong",{parentName:"p"},"Intent")," represents a user action or an event that leads to a state change in the ",(0,a.yg)("strong",{parentName:"p"},"Model"),"."),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-kotlin"},"sealed class LoginIntent {\n    data class Login(val username: String, val password: String) : LoginIntent()\n    object Logout : LoginIntent()\n}\n")),(0,a.yg)("h2",{id:"side-effects"},"Side Effects"),(0,a.yg)("p",null,"A ",(0,a.yg)("strong",{parentName:"p"},"SideEffect")," represents an external action triggered by a state change, such as network calls, database updates, or other asynchronous operations."),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-kotlin"},"sealed class LoginSideEffect {\n    object ShowInvalidCredentialsError : LoginSideEffect()\n    object Close : LoginSideEffect()\n}\n")),(0,a.yg)("h2",{id:"state"},"State"),(0,a.yg)("p",null,"The ",(0,a.yg)("strong",{parentName:"p"},"State")," combines the ",(0,a.yg)("strong",{parentName:"p"},"ViewState")," and ",(0,a.yg)("strong",{parentName:"p"},"SideEffect")," components to provide a unified application state. It helps manage complex states within the app."))}g.isMDXComponent=!0}}]);