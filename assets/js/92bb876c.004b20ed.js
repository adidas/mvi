"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[184],{5680:(e,t,n)=>{n.d(t,{xA:()=>d,yg:()=>y});var r=n(6540);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var c=r.createContext({}),s=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},d=function(e){var t=s(e.components);return r.createElement(c.Provider,{value:t},e.children)},p="mdxType",g={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,i=e.originalType,c=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),p=s(n),u=o,y=p["".concat(c,".").concat(u)]||p[u]||g[u]||i;return n?r.createElement(y,a(a({ref:t},d),{},{components:n})):r.createElement(y,a({ref:t},d))}));function y(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=n.length,a=new Array(i);a[0]=u;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l[p]="string"==typeof e?e:o,a[1]=l;for(var s=2;s<i;s++)a[s]=n[s];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},7528:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>a,default:()=>g,frontMatter:()=>i,metadata:()=>l,toc:()=>s});var r=n(8168),o=(n(6540),n(5680));const i={title:"3. Getting started",sidebar_position:3},a="Getting Started",l={unversionedId:"getting_started",id:"getting_started",title:"3. Getting started",description:"To begin using adidas MVI in your project, follow these steps:",source:"@site/docs/getting_started.md",sourceDirName:".",slug:"/getting_started",permalink:"/mvi/docs/getting_started",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/getting_started.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{title:"3. Getting started",sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"2. Core Concepts",permalink:"/mvi/docs/core_concepts"},next:{title:"4. Examples",permalink:"/mvi/docs/examples"}},c={},s=[{value:"1. Add the Dependency",id:"1-add-the-dependency",level:2},{value:"2. Create the Components",id:"2-create-the-components",level:2},{value:"Login ViewModel",id:"login-viewmodel",level:3},{value:"3. Update the Activity",id:"3-update-the-activity",level:2}],d={toc:s},p="wrapper";function g({components:e,...t}){return(0,o.yg)(p,(0,r.A)({},d,t,{components:e,mdxType:"MDXLayout"}),(0,o.yg)("h1",{id:"getting-started"},"Getting Started"),(0,o.yg)("p",null,"To begin using adidas MVI in your project, follow these steps:"),(0,o.yg)("h2",{id:"1-add-the-dependency"},"1. Add the Dependency"),(0,o.yg)("p",null,"Add the following to your ",(0,o.yg)("inlineCode",{parentName:"p"},"build.gradle")," file:"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-gradle"},'implementation("com.adidas.mvi:mvi:{LATEST_VERSION}")\n')),(0,o.yg)("p",null,"Sync your project to download the necessary dependencies."),(0,o.yg)("h2",{id:"2-create-the-components"},"2. Create the Components"),(0,o.yg)("p",null,"Here's an example of setting up the ",(0,o.yg)("strong",{parentName:"p"},"LoginViewModel")," and managing intents."),(0,o.yg)("h3",{id:"login-viewmodel"},"Login ViewModel"),(0,o.yg)("p",null,"The ",(0,o.yg)("strong",{parentName:"p"},"LoginViewModel")," manages user actions and updates the application state based on intents."),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-kotlin"},"class LoginViewModel( logger: Logger ) : ViewModel(), MviHost<LoginIntent, State<LoginState, LoginSideEffect>> {\n    private val reducer = Reducer(\n        coroutineScope = viewModelScope,\n        initialInnerState = LoginState.LoggedOut(isLoggingIn = false),\n        logger = logger,\n        intentExecutor = this::executeIntent\n    )\n\n    override val state = reducer.state\n\n    override fun execute(intent: LoginIntent) {\n        reducer.executeIntent(intent)\n    }\n\n    private fun executeIntent(intent: LoginIntent) =\n        when (intent) {\n            is LoginIntent.Login -> executeLogin(intent)\n            LoginIntent.Logout -> executeLogout()\n            LoginIntent.Close -> executeClose()\n        }\n}\n")),(0,o.yg)("h2",{id:"3-update-the-activity"},"3. Update the Activity"),(0,o.yg)("p",null,"In your ",(0,o.yg)("inlineCode",{parentName:"p"},"Activity"),", use the view model and set the content:"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-kotlin"},"class MviSampleActivity : AppCompatActivity() {\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContent {\n            LoginScreen()\n        }\n    }\n}\n")),(0,o.yg)("p",null,"Now you're ready to use adidas MVI in your project!"))}g.isMDXComponent=!0}}]);